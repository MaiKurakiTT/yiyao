package com.lxkj.yiyao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lxkj.yiyao.db.QuestionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_BEAN".
*/
public class QuestionBeanDao extends AbstractDao<QuestionBean, Long> {

    public static final String TABLENAME = "QUESTION_BEAN";

    /**
     * Properties of entity QuestionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Num = new Property(0, Long.class, "num", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Question = new Property(2, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(3, int.class, "answer", false, "ANSWER");
        public final static Property Right = new Property(4, boolean.class, "right", false, "RIGHT");
    }


    public QuestionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: num
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"QUESTION\" TEXT," + // 2: question
                "\"ANSWER\" INTEGER NOT NULL ," + // 3: answer
                "\"RIGHT\" INTEGER NOT NULL );"); // 4: right
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
 
        Long num = entity.getNum();
        if (num != null) {
            stmt.bindLong(1, num);
        }
        stmt.bindLong(2, entity.getType());
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(3, question);
        }
        stmt.bindLong(4, entity.getAnswer());
        stmt.bindLong(5, entity.getRight() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
 
        Long num = entity.getNum();
        if (num != null) {
            stmt.bindLong(1, num);
        }
        stmt.bindLong(2, entity.getType());
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(3, question);
        }
        stmt.bindLong(4, entity.getAnswer());
        stmt.bindLong(5, entity.getRight() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionBean readEntity(Cursor cursor, int offset) {
        QuestionBean entity = new QuestionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // num
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // question
            cursor.getInt(offset + 3), // answer
            cursor.getShort(offset + 4) != 0 // right
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionBean entity, int offset) {
        entity.setNum(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setQuestion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer(cursor.getInt(offset + 3));
        entity.setRight(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionBean entity, long rowId) {
        entity.setNum(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionBean entity) {
        if(entity != null) {
            return entity.getNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionBean entity) {
        return entity.getNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
